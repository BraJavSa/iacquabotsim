<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_2019)/worlds/example_course.world" />
  <arg name="gui" default="true" />
  <arg name="verbose" default="false"/>
  <arg name="paused"  default="false"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="namespace" default="iacquabot"/>

  <!-- Initial USV location and attitude-->
  <arg name="x" default="5" />
  <arg name="y" default="-5" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="0" />

  <arg name="non_competition_mode" default="true"/>
  <arg name="enable_ros_network" value="$(arg non_competition_mode)"/>
  <env name="VRX_DEBUG" value="$(arg non_competition_mode)"/>
  <env unless="$(arg non_competition_mode)" name="GAZEBO_MODEL_PATH" value="$(find vrx_gazebo)/models:$(find wamv_gazebo)/models:$(find wamv_description)/models:$(optenv GAZEBO_MODEL_PATH)"/>

  <arg name="thrust_config" default="H" />

  <arg name="camera_enabled"       default="true" />
  <arg name="gps_enabled"          default="true" />
  <arg name="imu_enabled"          default="true" />
  <arg name="lidar_enabled"        default="true" />
  <arg name="ground_truth_enabled" default="true" />

  <!-- Start Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
    <arg name="enable_ros_network" value="$(arg enable_ros_network)"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <arg name="urdf" default="$(find usv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>
  <param name="$(arg namespace)/robot_description"
         command="$(find xacro)/xacro --inorder '$(arg urdf)'
         thruster_config:=$(arg thrust_config)
         camera_enabled:=$(arg camera_enabled)
         gps_enabled:=$(arg gps_enabled)
         imu_enabled:=$(arg imu_enabled)
         lidar_enabled:=$(arg lidar_enabled)
         ground_truth_enabled:=$(arg ground_truth_enabled)
         namespace:=$(arg namespace) "/>

  <!-- Spawn model -->
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" if="$(arg non_competition_mode)"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param $(arg namespace)/robot_description -model wamv"/>

  <node name="spawn_wamv" pkg="vrx_gazebo" type="spawn_wamv.bash" unless="$(arg non_competition_mode)"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              --urdf $(arg urdf) --model wamv"/>
<!-- Load trajectory markers model -->
  <node name="spawn_trajectory_markers" pkg="gazebo_ros" type="spawn_model"
        args="-file $(find usv_sim)/src/open_source_simulator/validation_scripts/sin_trajectory_markers.sdf -sdf -model trajectory_markers" output="screen"/>

  <!-- Existing nodes -->
  <node name="world2body" pkg="iacquabot" type="world2body" output="screen"/>
  <node name="thruster_signals" pkg="iacquabot" type="thruster_signals" output="screen"/>
  <node name="velocity_controller" pkg="iacquabot" type="velocity_controller" output="screen"/>
  <node name="sample_publisher" pkg="usv_sim" type="sample_pub.py" output="screen"/> 
  <node name="trayectory_draw" pkg="usv_sim" type="trayectory_goal.py" output="screen"/> 
  <!--node name="trajectory_logger" pkg="usv_sim" type="trayectory_logger.py" output="screen"/-->

  </launch>
